/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
MumuAudioGranularAudioProcessor::MumuAudioGranularAudioProcessor() : grainp_Array(nullptr)
{
    m_gBufferL = GranularBuffer();
    m_gBufferR = GranularBuffer();
    
    //Set sliders connected variable
    NormalisableRange<float> slider1Range(0.0, 1.0, 0.1, 1.0);
    addParameter(slider1Param = new AudioParameterFloat("slider1Param", "Slider1", slider1Range,1.0));
    
    addParameter(button1Param = new AudioParameterBool("button1Param", "Button1" , 0));
}

MumuAudioGranularAudioProcessor::~MumuAudioGranularAudioProcessor()
{
    if(grainp_Array)
        delete [] grainp_Array;
}

//==============================================================================
const String MumuAudioGranularAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String MumuAudioGranularAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String MumuAudioGranularAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool MumuAudioGranularAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool MumuAudioGranularAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool MumuAudioGranularAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool MumuAudioGranularAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool MumuAudioGranularAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double MumuAudioGranularAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int MumuAudioGranularAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int MumuAudioGranularAudioProcessor::getCurrentProgram()
{
    return 0;
}

void MumuAudioGranularAudioProcessor::setCurrentProgram (int index)
{
}

const String MumuAudioGranularAudioProcessor::getProgramName (int index)
{
    return String();
}

void MumuAudioGranularAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void MumuAudioGranularAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    m_fSampleRate = sampleRate;
    
    if (grainp_Array)
        delete [] grainp_Array;
    grainp_Array = new Grain[m_nNumberGrains];
    //turn off all grains
    for (int i = 0; i < m_nNumberGrains; i++)
    {
        grainp_Array[i].isBusy = 0;
    }
    //set up grain buffers (audio data)
    m_gBufferL.setBufferLength(sampleRate, 1);
    m_gBufferL.prepareToPlay();
    
    m_gBufferR.setBufferLength(sampleRate, 1);
    m_gBufferR.prepareToPlay();
    
    GrainL.setWindowSize(sampleRate, 0.05);
    GrainL.setDelta(sampleRate, 0.1);
    GrainR.setWindowSize(sampleRate, 0.05);
    GrainR.setDelta(sampleRate, 0.1);
    
    CounterL = 0;
    CounterR = 0;
    
}

void MumuAudioGranularAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void MumuAudioGranularAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);
        
        for ( int i = 0; i < buffer.getNumSamples(); i++ )
        {
            if (channel == 0)
            {
                m_gBufferL.process(channelData[i]);
                channelData[i] = GrainL.play(m_fSampleRate, m_gBufferL);
                CounterL++;
                if (CounterL >= 44100)
                {
                    GrainL.init(1, m_gBufferL);
                    GrainL.isBusy = 1;
                    CounterL = 0;
                }
            }
            if (channel == 1)
            {
                m_gBufferR.process(channelData[i]);
                channelData[i] = GrainR.play(m_fSampleRate, m_gBufferR);
                CounterR++;
                if (CounterR >= 44100)
                {
                    GrainR.init(1, m_gBufferR);
                    GrainR.isBusy = 1;
                    CounterR = 0;
                }
            }
        } 
    }
}

//==============================================================================
bool MumuAudioGranularAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* MumuAudioGranularAudioProcessor::createEditor()
{
    return new MumuAudioGranularAudioProcessorEditor (*this);
}

//==============================================================================
void MumuAudioGranularAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void MumuAudioGranularAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new MumuAudioGranularAudioProcessor();
}
