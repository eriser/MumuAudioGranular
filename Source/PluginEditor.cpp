/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
MumuAudioGranularAudioProcessorEditor::MumuAudioGranularAudioProcessorEditor (MumuAudioGranularAudioProcessor& p)
: AudioProcessorEditor (&p), processor (p), Tab(TabbedButtonBar::TabsAtLeft), Tab1_stretchButton("Grain")
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (600, 280);
    LookAndFeel::setDefaultLookAndFeel(&myLookAndFeel);
    
    //======== Tab Bar =========
    addAndMakeVisible(Tab);
    Tab.setBounds(0, 20, 20, 180);
    Tab.addTab("Pitch / Stretch", Colour(Colours::darkgrey), 1);
    Tab.addTab("Rhythmic Chop", Colour(Colours::darkgrey), 2);
    Tab.addTab("Patches", Colour(Colours::darkgrey), 3);
    Tab.setAlpha(0.8);
    Tab.addChangeListener(this);
    
    //======== Tab 1 ===========
    PitchStretch.setBounds(20, 0, 580, 280);
    PitchStretch.addAndMakeVisible(Tab1_pitchKnob);
    PitchStretch.addAndMakeVisible(Tab1_densityKnob);
    PitchStretch.addAndMakeVisible(Tab1_grainSizeKnob);
    PitchStretch.addAndMakeVisible(Tab1_dryWayKnob);
    PitchStretch.addAndMakeVisible(Tab1_stretchSpeedKnob);
    PitchStretch.addAndMakeVisible(Tab1_stretchButton);
    
    addChildComponent(PitchStretch);
    
    Tab1_pitchKnob.setTextBoxStyle(Slider::NoTextBox, false, 0, 0);
    Tab1_pitchKnob.setName("Slider 1");
    Tab1_pitchKnob.setSliderStyle(Slider::RotaryVerticalDrag);
    Tab1_pitchKnob.setRange(0.0, 1.0);
    Tab1_pitchKnob.addListener(this);
    Tab1_pitchKnob.setBounds(60, 28, 75, 75);
    
    Tab1_pitchLabel.setText("Pitch", dontSendNotification);
    Tab1_pitchLabel.setColour(juce::Label::textColourId, juce::Colour(255.0f, 255.0f, 255.0f));
    Tab1_pitchLabel.attachToComponent(&Tab1_pitchKnob, true);
    
    Tab1_densityKnob.setTextBoxStyle(Slider::NoTextBox, false, 0, 0);
    Tab1_densityKnob.setName("Slider 2");
    Tab1_densityKnob.setSliderStyle(Slider::RotaryVerticalDrag);
    Tab1_densityKnob.setRange(0.0, 1.0);
    Tab1_densityKnob.addListener(this);
    Tab1_densityKnob.setBounds(160, 88, 75, 75);
    
    Tab1_densityLabel.setText("Density", dontSendNotification);
    Tab1_densityLabel.setColour(juce::Label::textColourId, juce::Colour(255.0f, 255.0f, 255.0f));
    Tab1_densityLabel.attachToComponent(&Tab1_densityKnob, true);
    
    Tab1_grainSizeKnob.setTextBoxStyle(Slider::NoTextBox, false, 0, 0);
    Tab1_grainSizeKnob.setName("Slider 3");
    Tab1_grainSizeKnob.setSliderStyle(Slider::RotaryVerticalDrag);
    Tab1_grainSizeKnob.setRange(0.0, 1.0);
    Tab1_grainSizeKnob.addListener(this);
    Tab1_grainSizeKnob.setBounds(260, 28, 75, 75);
    
    Tab1_grainSizeLabel.setText("GrainSize", dontSendNotification);
    Tab1_grainSizeLabel.setColour(juce::Label::textColourId, juce::Colour(255.0f, 255.0f, 255.0f));
    Tab1_grainSizeLabel.attachToComponent(&Tab1_grainSizeKnob, true);
    addAndMakeVisible(Tab1_grainSizeLabel);
    
    Tab1_dryWayKnob.setTextBoxStyle(Slider::NoTextBox, false, 0, 0);
    Tab1_dryWayKnob.setName("Slider 4");
    Tab1_dryWayKnob.setSliderStyle(Slider::RotaryVerticalDrag);
    Tab1_dryWayKnob.setRange(0.0, 1.0);
    Tab1_dryWayKnob.addListener(this);
    Tab1_dryWayKnob.setBounds(360, 88, 75, 75);
    
    Tab1_dryWetLabel.setText("Dry/Wet", dontSendNotification);
    Tab1_dryWetLabel.setColour(juce::Label::textColourId, juce::Colour(255.0f, 255.0f, 255.0f));
    Tab1_dryWetLabel.attachToComponent(&Tab1_dryWayKnob, true);
    addAndMakeVisible(Tab1_dryWetLabel);
    
    Tab1_stretchSpeedKnob.setTextBoxStyle(Slider::NoTextBox, false, 0, 0);
    Tab1_stretchSpeedKnob.setName("Slider 5");
    Tab1_stretchSpeedKnob.setSliderStyle(Slider::RotaryVerticalDrag);
    Tab1_stretchSpeedKnob.setRange(0.0, 1.0);
    Tab1_stretchSpeedKnob.addListener(this);
    Tab1_stretchSpeedKnob.setBounds(500, 88, 45, 45);
    
    Tab1_stretchSpeedLabel.setText("Speed", dontSendNotification);
    Tab1_stretchSpeedLabel.setColour(juce::Label::textColourId, juce::Colour(255.0f, 255.0f, 255.0f));
    Tab1_stretchSpeedLabel.attachToComponent(&Tab1_stretchSpeedKnob, false);
    addAndMakeVisible(Tab1_stretchSpeedLabel);
    
    Tab1_stretchButton.setBounds(480,28,80,20);
    Tab1_stretchButton.setColour(juce::ToggleButton::textColourId , Colours::white);
    Tab1_stretchButton.addListener(this);
    
    addMouseListener(this, true);
    
    timerCallback();
    checkTabs();
    startTimer(50);
}
//==============================================================================
MumuAudioGranularAudioProcessorEditor::~MumuAudioGranularAudioProcessorEditor()
{
}

//==============================================================================
void MumuAudioGranularAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colour(30,30,30));
    g.setGradientFill(ColourGradient(Colour(255,255,255), 0, 0, Colour(211,211,211), 600, 0, false));
    //top rectangle
    g.fillRoundedRectangle(0,6,600,8,2);
    
    g.setGradientFill(ColourGradient(Colour(255,255,255), 0, 280, Colour(211,211,211), 300, 280, false));
    //lower rectangle & text
    //first half
    g.fillRoundedRectangle(0,263,370,8,2);
    //text
    g.setColour(Colour(uint8(211),uint8(211),uint8(211),float(1)));
    g.setFont (Font("Arial", 10, Font::bold + Font::italic));
    g.drawSingleLineText(" Mumu[Audio] | MNML Granular | CalArts MTIID", 370, 270);
    //second rect
    g.fillRoundedRectangle(572,263,26,8,2);
    
    Image Logo = ImageCache::getFromMemory(BinaryData::MumuLight_png, BinaryData::MumuLight_pngSize);
    //g.drawImageAt(Logo, 10, 40);
    g.drawImage(Logo, 10, 218, 65, 35, 0, 0, 115, 65);
    Image MTIID = ImageCache::getFromMemory(BinaryData::MTIID_png, BinaryData::MTIID_pngSize);
    //g.drawImageAt(Logo, 10, 40);
    g.drawImage(MTIID, 83, 220, 85, 30, 0, 0, 190, 95);
    
    //vert
    g.fillRoundedRectangle(171,208,1,55,0);
    //horizontal
    g.fillRoundedRectangle(0,208,600,1,0);
}
//==============================================================================
void MumuAudioGranularAudioProcessorEditor::timerCallback(){
    Tab1_pitchKnob.setValue(processor.Tab1_pitchKnobParam->getValue(), dontSendNotification);
    Tab1_densityKnob.setValue(processor.Tab1_densityKnobParam->getValue(), dontSendNotification);
    Tab1_grainSizeKnob.setValue(processor.Tab1_grainSizeKnobParam->getValue(), dontSendNotification);
    Tab1_dryWayKnob.setValue(processor.Tab1_dryWayKnobParam->getValue(), dontSendNotification);
    Tab1_stretchSpeedKnob.setValue(processor.Tab1_stretchSpeedKnobParam->getValue(), dontSendNotification);
    Tab.setCurrentTabIndex(processor.currentTab->getValue(), dontSendNotification);
}
//==============================================================================
void MumuAudioGranularAudioProcessorEditor::sliderValueChanged (Slider* sliderThatHasChanged){
    
    if (sliderThatHasChanged == &Tab1_pitchKnob) {
        processor.Tab1_pitchKnobParam->beginChangeGesture();
        processor.Tab1_pitchKnobParam->setValueNotifyingHost(sliderThatHasChanged->getValue());
        processor.Tab1_pitchKnobParam->endChangeGesture();
    }
    if (sliderThatHasChanged == &Tab1_densityKnob) {
        processor.Tab1_densityKnobParam->beginChangeGesture();
        processor.Tab1_densityKnobParam->setValueNotifyingHost(sliderThatHasChanged->getValue());
        processor.Tab1_densityKnobParam->endChangeGesture();
    }
    if (sliderThatHasChanged == &Tab1_grainSizeKnob) {
        processor.Tab1_grainSizeKnobParam->beginChangeGesture();
        processor.Tab1_grainSizeKnobParam->setValueNotifyingHost(sliderThatHasChanged->getValue());
        processor.Tab1_grainSizeKnobParam->endChangeGesture();
    }
    if (sliderThatHasChanged == &Tab1_dryWayKnob) {
        processor.Tab1_dryWayKnobParam->beginChangeGesture();
        processor.Tab1_dryWayKnobParam->setValueNotifyingHost(sliderThatHasChanged->getValue());
        processor.Tab1_dryWayKnobParam->endChangeGesture();
    }
    if (sliderThatHasChanged == &Tab1_stretchSpeedKnob) {
        processor.Tab1_stretchSpeedKnobParam->beginChangeGesture();
        processor.Tab1_stretchSpeedKnobParam->setValueNotifyingHost(sliderThatHasChanged->getValue());
        processor.Tab1_stretchSpeedKnobParam->endChangeGesture();
    }
}
//==============================================================================
void MumuAudioGranularAudioProcessorEditor::mouseDown(const MouseEvent & e) {
    if ( dynamic_cast<Slider*>(e.eventComponent)  ){
        e.source.enableUnboundedMouseMovement(true);
    }
}
//==============================================================================
void MumuAudioGranularAudioProcessorEditor::buttonClicked(juce::Button *button){
    if (button == &Tab1_stretchButton)
    {
        processor.Tab1_stretchButtonParam->setValueNotifyingHost(Tab1_stretchButton.getToggleState());
    }
}
//==============================================================================
void MumuAudioGranularAudioProcessorEditor::changeListenerCallback(juce::ChangeBroadcaster *source){
    checkTabs();
}
//==============================================================================
void MumuAudioGranularAudioProcessorEditor::checkTabs(){
    if (Tab.getCurrentTabIndex() == 0)
    {
        PitchStretch.setVisible(true);
        processor.currentTab->setValueNotifyingHost(0);
    }
    else if (Tab.getCurrentTabIndex() == 1)
    {
        PitchStretch.setVisible(false);
        processor.currentTab->setValueNotifyingHost(1);
    }
    else if (Tab.getCurrentTabIndex() == 2)
    {
        PitchStretch.setVisible(false);
        processor.currentTab->setValueNotifyingHost(2);
    }
}


