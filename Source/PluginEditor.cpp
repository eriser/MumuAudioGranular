/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
MumuAudioGranularAudioProcessorEditor::MumuAudioGranularAudioProcessorEditor (MumuAudioGranularAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p), button1("Grain")
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    
    Slider1.setTextBoxStyle(Slider::NoTextBox, false, 0, 0);
    Slider1.setSliderStyle(Slider::Rotary);
    Slider1.setRange(0.0, 1.0);
    Slider1.addListener(this);
    Slider1.setBounds(10, 10, 300, 300);
    addAndMakeVisible(Slider1);
    
    
    button1.setBounds(220,40,60,30);
    button1.addMouseListener(this, true);
    addAndMakeVisible(&button1);
    
    addMouseListener(this, true);
    
    timerCallback();
    startTimer(50);
}

MumuAudioGranularAudioProcessorEditor::~MumuAudioGranularAudioProcessorEditor()
{
}

//==============================================================================
void MumuAudioGranularAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
}

void MumuAudioGranularAudioProcessorEditor::timerCallback(){
    Slider1.setValue(processor.slider1Param->getValue(), dontSendNotification);
}

void MumuAudioGranularAudioProcessorEditor::sliderValueChanged (Slider* sliderThatHasChanged){
    
    if (sliderThatHasChanged == &Slider1) {
        processor.slider1Param->beginChangeGesture();
        processor.slider1Param->setValueNotifyingHost(sliderThatHasChanged->getValue());
        processor.slider1Param->endChangeGesture();
    }
}

void MumuAudioGranularAudioProcessorEditor::mouseDown(const MouseEvent & e) {
    e.source.enableUnboundedMouseMovement(true);
    if (button1.isDown() == 1)
    {
        processor.button1Param->setValueNotifyingHost(button1.isDown());
    }
}
void MumuAudioGranularAudioProcessorEditor::mouseUp(const MouseEvent & e) {
    if (button1.isDown() == 0)
    {
        processor.button1Param->setValueNotifyingHost(button1.isDown());
    }
}

